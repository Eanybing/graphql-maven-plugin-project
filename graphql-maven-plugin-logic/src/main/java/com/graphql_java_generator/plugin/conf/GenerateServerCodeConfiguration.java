/**
 * 
 */
package com.graphql_java_generator.plugin.conf;

import java.io.File;

import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * This class contains all parameters for the <I>generateServerCode</I> goal/task.
 * 
 * @author etienne-sf
 */
public interface GenerateServerCodeConfiguration extends GenerateCodeCommonConfiguration {

	// The String constant must be a constant expression, for use in the GraphqlMavenPlugin class.
	// So all these are String, including Boolean and Enum. Boolean are either "true" or "false"

	public final String DEFAULT_GENERATE_JPA_ANNOTATION = "false";
	public final String DEFAULT_JAVA_TYPE_FOR_ID_TYPE = "java.util.UUID";
	public final String DEFAULT_SCAN_BASE_PACKAGES = "null";
	public final String DEFAULT_SEPARATE_UTIL_CLASSES = "false";
	public final String DEFAULT_SCHEMA_PERSONALIZATION_FILE = "null"; // Can't by null, must be a valid String.

	/**
	 * The <I>packaging</I> is the kind of artefact generated by the project. Typically: jar (for a standard Java
	 * application) or war (for a webapp)
	 */
	public Packaging getPackaging();

	/**
	 * <P>
	 * The <I>javaTypeForIDType</I> is the java class that is used in the generated code for GraphQL fields that are of
	 * the GraphQL ID type. The default value is <I>java.util.UUID</I>. Valid values are: java.lang.String,
	 * java.lang.Long and java.util.UUID.
	 * </P>
	 * <P>
	 * This parameter is only valid for the server mode. When generating the client code, the ID is always generated as
	 * a String type, as recommended in the GraphQL doc.
	 * </P>
	 * <P>
	 * In other words: when in server mode and <I>javaTypeForIDType</I> is not set, all GraphQL ID fields are UUID
	 * attributes in java. When in server mode and <I>javaTypeForIDType</I> is set to the X type, all GraphQL ID fields
	 * are X attributes in java.
	 * </P>
	 * <P>
	 * Note: you can override this, by using the schema personalization capability. For more information, please have a
	 * look at the
	 * <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/schema_personalization.html">Schema
	 * Personalization doc page</A>.
	 * </P>
	 * 
	 * @return
	 */
	public String getJavaTypeForIDType();

	/**
	 * <P>
	 * (only for server mode) A comma separated list of package names, <B>without</B> double quotes, that will also be
	 * parsed by Spring, to discover Spring beans, Spring repositories and JPA entities when the server starts. You
	 * should use this parameter only for packages that are not subpackage of the package defined in the _packageName_
	 * parameter and not subpackage of <I>com.graphql_java_generator</I>
	 * </P>
	 * <P>
	 * This allows for instance, to set <I>packageName</I> to <I>your.app.package.graphql</I>, and to define your Spring
	 * beans, like the
	 * <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/server.html">DataFetcherDelegates</A> or
	 * your Spring data repositories in any other folder, by setting for instance scanBasePackages to
	 * <I>your.app.package.impl, your.app.package.graphql</I>, or just <I>your.app.package</I>
	 * </P>
	 */
	public String getScanBasePackages();

	/**
	 * Transform the list of package names returned by {@link #getScanBasePackages()} by a list of package names,
	 * surrounded by double quotes, as it can be used in the Spring scanBasePackages property of the
	 * {@link SpringBootApplication} Spring annotation.
	 * 
	 * @return A string that can be added to the scanBasePackages property of {@link SpringBootApplication}, that is: an
	 *         empty String, or a list of quoted package names starting with a comma (e.g.: ", \"my.package\",
	 *         \"my.other.package\"")
	 */
	public default String getQuotedScanBasePackages() {
		String scanBasePackages = getScanBasePackages();

		if (scanBasePackages == null || scanBasePackages.contentEquals("") || scanBasePackages.contentEquals("null")) {
			return "";
		}

		// Let's remove all spaces. It will be easier to insert the good double quotes, afterwards.
		// Let's say scanBasePackages is: a, b, c,d
		scanBasePackages = scanBasePackages.replace(" ", "");// scanBasePackages is now a,b,c,d
		scanBasePackages = scanBasePackages.replace(",", "\",\"");// scanBasePackages is now a","b","c","d
		scanBasePackages = ",\"" + scanBasePackages + "\"";// scanBasePackages is now ,"a","b","c","d"
		return scanBasePackages;
	}

	/**
	 * <P>
	 * schemaPersonalizationFile is the file name where the GraphQL maven plugin will find personalization that it must
	 * apply before generating the code. This applies to the <B>server</B> mode only. See
	 * <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/schema_personalization.html">the doc on
	 * the plugin web site</A> for more details.
	 * </P>
	 * <P>
	 * The standard file would be something like /src/main/graphql/schemaPersonalizationFile.json, which avoids to embed
	 * this compile time file within your maven artifact (as it is not in the /src/main/java nor in the
	 * /src/main/resources folders).
	 * </P>
	 * 
	 * @return
	 */
	public File getSchemaPersonalizationFile();

	/**
	 * <P>
	 * Indicates whether the plugin should generate the JPA annotations, for generated objects, when in server mode.
	 * </P>
	 * <P>
	 * <B><I>Default value is false</I></B>
	 * </P>
	 */
	public boolean isGenerateJPAAnnotation();

	/** Logs all the configuration parameters (only when in the debug level) */
	@Override
	public default void logConfiguration() {
		if (getPluginLogger().isDebugEnabled()) {
			getPluginLogger().debug("-- start configuration --");
			getPluginLogger().debug(
					"The graphql-java-generator Plugin Configuration for the generateServerCode goal/task is -->");
			logGenerateServerCodeConfiguration();
			getPluginLogger().debug("-- end configuration --");
		}
	}

	/**
	 * Logs all the configuration parameters for the <I>generateServerCode</I> task/goal (only when in the debug level)
	 */
	public default void logGenerateServerCodeConfiguration() {
		getPluginLogger().debug("  Parameters specific to the generateServerCode task/goal:");
		getPluginLogger().debug("    generateJPAAnnotation: " + isGenerateJPAAnnotation());
		getPluginLogger().debug("    packaging: " + getPackaging());
		getPluginLogger().debug("    scanBasePackages: " + getScanBasePackages());
		getPluginLogger().debug("    schemaPersonalizationFile: " + getSchemaPersonalizationFile());
		logGenerateCodeCommonConfiguration();
	}
}
