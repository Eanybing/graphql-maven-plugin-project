######################################################################################################################################################
##
##  The "fieldType" macro writes the field type, in GraphQL format: Type, Type!, [Type], [Type]!, [Type!] or [Type!]!
##
## parameters: 
## 1) FieldImpl: the field, which type is to be displayed 
##
#macro(fieldType $field)#if($field.list)[#end${field.type.name}#if($field.itemMandatory)!#end#if($field.list)]#end#if($field.mandatory)!#end#end
##
##
######
######################################################################################################################################################
##
##  The "objectFields" macro generates the list of fields for an ObjectType or for an InterfaceType
##
## parameters: 
## 1) List<FieldImpl>: the list of fields to display 
##
######
#macro(objectFields $fields)
#foreach ($field in $fields)
##
## To make this template readable, the parameters are written one per line. Which means that the way the field
## is written depends on whether this field has or doesn't have input parameters
##
#if ($field.inputParameters.size() > 0)
	${field.name} (## No newline here
#foreach ($param in $field.inputParameters)
${param.name}: #fieldType($param)#if($param.defaultValue)=${param.getDefaultValueAsText()}#end#if($foreach.hasNext), #end##no newline here 
#end
): #fieldType($field)#implementedDirective($field.appliedDirectives)$space
#else
	${field.name}: #fieldType($field)#implementedDirective($field.appliedDirectives)$space
#end
#end
#end
##
######################################################################################################################################################
##
##  The "implements" macro generates the "implements interface1, interface2 ..., interface n " string
##
## parameters: 
## 1) List<String>: the list of name if interfaces or unions. The unions won't be written in the result. This is actually the ObjectType.implementz attribute. 
##
######
#macro(implements $implements)
#set($appendImplements=true)## As not all items in implements will be displayed, we dont even know if there is an interface in the list
#set($appendSep=false)## As not all items in implements will be displayed, we can't rely on the ($foreach.hasNext) stuff
#foreach($implement in $implements)##
#if($appendImplements) implements #end##
#set($appendImplements=false)##
## the implementz field contains both the interfaces (that we want here) and the unions (that we don't want here)
#if($documentParser.getType($implement).class.simpleName == "InterfaceType")
#if($appendSep), #end##
$implement##
#end
#set($appendSep=true)
#end
#end
######################################################################################################################################################
##
##  The "implementedDirective" macro generates the @Directive... for all the given applied directives. Or nothing if the list is empty.
##
## parameters: 
## 1) List<appliedDir>: the list of applied directives that should be written 
##
######
#macro (implementedDirective $appliedDirectives)
#foreach($appliedDir in $appliedDirectives)

        @${appliedDir.directive.name}##
#if($appliedDir.argumentValues.keySet().size() > 0)(#end
#foreach($argName in $appliedDir.argumentValues.keySet())##
$argName: ${graphqlUtils.getValueAsText($appliedDir.argumentValues[$argName])}#if($foreach.hasNext), #end
#end
#if($appliedDir.argumentValues.keySet().size() > 0))#end
#end
#end
##
###############################################################################################################
################  Custom Scalars  #############################################################################
###############################################################################################################
#foreach ($customScalar in $customScalars)
scalar ${customScalar.name}#implementedDirective($customScalar.appliedDirectives)$space

#end

###############################################################################################################
################  Enums           #############################################################################
###############################################################################################################
#foreach ($enum in $enumTypes)
enum ${enum.name}#implementedDirective($enum.appliedDirectives) {
#foreach ($value in $enum.values)
	${value.name}#implementedDirective($value.appliedDirectives)$space
#end
}

#end

###############################################################################################################
################  Directives      #############################################################################
###############################################################################################################
#foreach ($directive in $directives)
#if (! $directive.standard)
directive @${directive.name} #if ($directive.arguments.size() > 0)(
#else $space
#end
#foreach($arg in $directive.arguments)
	${arg.name}: #fieldType($arg) #if($arg.defaultValue)= ${arg.getDefaultValueAsText()}#end $space
#end
#if ($directive.arguments.size() > 0)
)
#end
on #foreach($loc in $directive.directiveLocations)$loc#if($foreach.hasNext) | #end#end $space

#end
#end


###############################################################################################################
################  Schema          #############################################################################
###############################################################################################################
schema {
#if ($queryType)
	query: $queryType.name
#end
#if ($mutationType)
	mutation: $mutationType.name
#end
#if ($subscriptionType)
	subscription: $subscriptionType.name
#end
}

###############################################################################################################
################  Unions          #############################################################################
###############################################################################################################
#foreach ($union in $unionTypes)
union ${union.name}#implementedDirective($union.appliedDirectives)$space
= #foreach ($type in $union.memberTypes)${type.name}#if($foreach.hasNext) | #end#end

#end

###############################################################################################################
################  Interfaces      #############################################################################
###############################################################################################################
#foreach ($interface in $interfaceTypes)
interface ${interface.name}#implementedDirective($interface.appliedDirectives) {
#objectFields($interface.fields)
}

#end

###############################################################################################################
################  Objects         #############################################################################
###############################################################################################################
#foreach ($objectType in $objectTypes)
#if($objectType.inputType)input#{else}type#end ${objectType.name}#implements($objectType.implementz)#implementedDirective($objectType.appliedDirectives) {
#objectFields($objectType.fields)
}

#end