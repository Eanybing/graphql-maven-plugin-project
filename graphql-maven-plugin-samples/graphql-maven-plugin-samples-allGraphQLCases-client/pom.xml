<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.graphql-java-generator</groupId>
		<artifactId>graphql-maven-plugin-samples</artifactId>
		<version>1.11</version>
	</parent>

	<artifactId>graphql-maven-plugin-samples-allGraphQLCases-client</artifactId>

	<build>
		<plugins>
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<executions>
					<!-- These two executions allow to test the merge goal, then generate the code from the merged GraphQL schema file. 
						The graphql-maven-plugin-samples-allGraphQLCases-server project directly generates the code from the two (non merged) GraphQL 
						schema files -->
					<execution>
						<id>graphql-merge</id>
						<goals>
							<goal>generateGraphQLSchema</goal>
						</goals>
						<configuration>
							<!-- addRelayConnections will generate all the Relay Connection stuff (Node, Edge and Connection interfaces, and creating 
								the XxxEdge and XxxConnection interfaces or objects), for fields marked with the @RelatConnection directive. See the documentation 
								for more information -->
							<addRelayConnections>true</addRelayConnections>
							<schemaFileFolder>${basedir}/src/graphqls/</schemaFileFolder>
							<targetFolder>${basedir}/target/generated-resources/graphql-merge</targetFolder>
							<targetSchemaFileName>merged_schemas.graphqls</targetSchemaFileName>
						</configuration>
					</execution>
					<execution>
						<id>graphql-generateCode</id>
						<goals>
							<goal>generateClientCode</goal>
						</goals>
						<configuration>
							<!-- In this pom, we choose not to copy the runtime. It allows to replace it by another one, for instance one updated 
								for your needs. You then need to add this runtime as a dependency -->
							<copyGraphQLJavaSources>false</copyGraphQLJavaSources>
							<packageName>org.allGraphQLCases.client</packageName>
							<schemaFileFolder>${basedir}/target/generated-resources/graphql-merge/</schemaFileFolder>
							<separateUtilityClasses>true</separateUtilityClasses>
							<customScalars>
								<customScalar>
									<graphQLTypeName>Date</graphQLTypeName>
									<javaType>java.util.Date</javaType>
									<graphQLScalarTypeStaticField>com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>else</graphQLTypeName>
									<javaType>java.lang.String</javaType>
									<graphQLScalarTypeGetter>org.allGraphQLCases.GraphQLScalarTypeElse.getElseScalar()</graphQLScalarTypeGetter>
								</customScalar>
								<customScalar>
									<graphQLTypeName>Long</graphQLTypeName>
									<javaType>java.lang.Long</javaType>
									<graphQLScalarTypeStaticField>graphql.Scalars.GraphQLLong</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>NonNegativeInt</graphQLTypeName>
									<javaType>java.lang.Integer</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.NonNegativeInt</graphQLScalarTypeStaticField>
								</customScalar>
							</customScalars>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- This helps by adding the generated source in the build path of your IDE -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<inherited>true</inherited>
			</plugin>
			<plugin>
				<!-- Execution of the integration tests -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- This plugin allows to start the SpringBoot server in the background during the integration tests -->
				<groupId>com.bazaarvoice.maven.plugins</groupId>
				<artifactId>process-exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>switchboard-process</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<name>allGraphQLCases sample GraphQL server</name>
							<workingDir>allGraphQLCases_graphql_server</workingDir>
							<waitForInterrupt>false</waitForInterrupt>
							<healthcheckUrl>http://localhost:8180/graphiql</healthcheckUrl>
							<arguments>
								<argument>java</argument>
								<argument>-jar</argument>
								<argument>${basedir}/../graphql-maven-plugin-samples-allGraphQLCases-server/target/graphql-maven-plugin-samples-allGraphQLCases-server-${project.version}.jar</argument>
							</arguments>
						</configuration>
					</execution>
					<!--Stop all processes in reverse order -->
					<execution>
						<id>stop-all</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop-all</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<!-- We don't want to spam the repository with test/sample artefacts -->
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- Dependencies for tests -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-maven-plugin-samples-allGraphQLCases-server</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- Dependencies for the generated code -->
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-java-client-dependencies</artifactId>
			<type>pom</type>
		</dependency>
		<!-- In this pom, we choose not to copy the runtime. It allows to replace it by another one, for instance one updated for 
			your needs. You then need to add this runtime as a dependency -->
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-java-runtime</artifactId>
		</dependency>
		<!-- Complementary graphql dependencies -->
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java-extended-scalars</artifactId>
		</dependency>

		<!-- The logging framework -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
		</dependency>

	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<reportSets>
					<reportSet>
						<id>non-aggregate</id>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

</project>
