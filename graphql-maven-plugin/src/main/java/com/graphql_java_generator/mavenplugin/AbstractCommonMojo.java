/**
 * 
 */
package com.graphql_java_generator.mavenplugin;

import java.io.File;
import java.time.Duration;
import java.time.Instant;
import java.util.Map;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.graphql_java_generator.plugin.DocumentParser;
import com.graphql_java_generator.plugin.conf.CommonConfiguration;
import com.graphql_java_generator.plugin.conf.GraphQLConfiguration;

/**
 * This class is the super class of all Mojos. It contains all parameters that are common to all goals, and the
 * {@link #execute()} method.<BR/>
 * This avoids to redeclare each common parameter in each Mojo, including its comment. When a comment is updated, only
 * one update is necessary, instead of updating it in each Mojo.
 * 
 * @author etienne-sf
 */
public abstract class AbstractCommonMojo extends AbstractMojo {

	/**
	 * <P>
	 * True if the plugin is configured to add the relay connection capabilities, as
	 * <A HREF="https://relay.dev/docs/en/graphql-server-specification.html">described here</A> and specified on the
	 * <A HREF="https://relay.dev/graphql/connections.htm">.
	 * </P>
	 * <P>
	 * If set to true, the plugin will add:
	 * </P>
	 * <UL>
	 * <LI>The <I>Node</I> interface in the GraphQL schema (if not already defined). If this interface is already
	 * defined in the given schema, but is not compliant, then an error is thrown.</LI>
	 * <LI>The <I>@RelayConnexion</I> directive definition in the GraphQL schema (if not already defined). If this is
	 * already defined in the given schema, but is not compliant with the relay specification, then an error is
	 * thrown.</LI>
	 * <LI>The <I>Node</I> interface in the GraphQL schema (if not already defined). If this interface is already
	 * defined in the given schema, but is not compliant with the relay specification, then an error is thrown.</LI>
	 * <LI>The <I>PageInfo</I> type in the GraphQL schema (if not already defined). If this type is already defined in
	 * the given schema, but is not compliant with the relay specification, then an error is thrown.</LI>
	 * <LI>All the Edge and Connection type in the GraphQL schema, for each type that is marked by the
	 * <I>@RelayConnexion</I> directive.</LI>
	 * </UL>
	 */
	@Parameter(property = "com.graphql_java_generator.mavenplugin.addRelayConnections", defaultValue = CommonConfiguration.DEFAULT_ADD_RELAY_CONNECTIONS)
	boolean addRelayConnections;

	/** The package name that will contain the generated classes */
	@Parameter(property = "com.graphql_java_generator.mavenplugin.packageName", defaultValue = GraphQLConfiguration.DEFAULT_PACKAGE_NAME)
	String packageName;

	/**
	 * Not available to the user: the {@link MavenProject} in which the plugin executes
	 */
	@Parameter(defaultValue = "${project}", readonly = true, required = true)
	MavenProject project;

	/** The folder where the graphql schema file(s) will be searched. The default schema is the main resource folder. */
	@Parameter(property = "com.graphql_java_generator.mavenplugin.schemaFileFolder", defaultValue = GraphQLConfiguration.DEFAULT_SCHEMA_FILE_FOLDER)
	File schemaFileFolder;

	/**
	 * <P>
	 * The pattern to find the graphql schema file(s). The default value is "/*.graphqls" meaning that the maven plugin
	 * will search all graphqls files in the "/src/main/resources" folder (please check also the <I>schemaFileFolder</I>
	 * plugin parameter).
	 * </P>
	 * <P>
	 * You can put the star (*) joker in the filename, to retrieve several files at ones, for instance
	 * <I>/myschema*.graphqls</I> will retrieve the <I>/src/main/resources/myschema.graphqls</I> and
	 * <I>/src/main/resources/myschema_extend.graphqls</I> files.
	 * <P>
	 */
	@Parameter(property = "com.graphql_java_generator.mavenplugin.schemaFilePattern", defaultValue = GraphQLConfiguration.DEFAULT_SCHEMA_FILE_PATTERN)
	String schemaFilePattern;

	/**
	 * <P>
	 * Map of the code templates to be used: this allows to override the default templates, and control exactly what
	 * code is generated by the plugin.
	 * </P>
	 * <P>
	 * You can override any of the Velocity templates of the project. The list of templates is defined in the enum
	 * CodeTemplate, that you can <A HREF=
	 * "https://github.com/graphql-java-generator/graphql-maven-plugin-project/blob/master/graphql-maven-plugin-logic/src/main/java/com/graphql_java_generator/plugin/CodeTemplate.java">check
	 * here</A>.
	 * </P>
	 * <P>
	 * You can find a sample in the <A HREF=
	 * "https://github.com/graphql-java-generator/graphql-maven-plugin-project/blob/master/graphql-maven-plugin-samples/graphql-maven-plugin-samples-CustomTemplates-client/pom.xml">CustomTemplates
	 * client sample</A>.
	 * </P>
	 * <P>
	 * <B>Important notice:</B> Please note that the default templates may change in the future. And some of these
	 * modifications would need to be reported into the custom templates. We'll try to better expose a stable public API
	 * in the future.
	 * </P>
	 */
	@Parameter(property = "com.graphql_java_generator.mavenplugin.templates")
	Map<String, String> templates;

	/**
	 * This class contains the Sprign configuration for the actual instance of this Mojo. It's set by subclasses,
	 * through the constructor
	 */
	protected final Class<?> springConfigurationClass;

	/** The Spring context used for the plugin execution. It contains all the beans that runs for its execution */
	protected AnnotationConfigApplicationContext ctx;

	/** The {@link DocumentParser} that contains all the data for the parsed GraphQL schema(s) */
	protected DocumentParser documentParser;

	AbstractCommonMojo(Class<?> springConfigurationClass) {
		this.springConfigurationClass = springConfigurationClass;
	}

	/** {@inheritDoc} */
	@Override
	public void execute() throws MojoExecutionException, MojoFailureException {
		try {
			Instant start = Instant.now();
			getLog().debug("Starting generation of java classes from graphqls files");

			// We'll use Spring IoC
			ctx = new AnnotationConfigApplicationContext();
			ctx.getBeanFactory().registerSingleton("mojo", this);
			ctx.register(springConfigurationClass);
			ctx.refresh();

			// Let's log the current configuration (this will do something only when in
			// debug mode)
			ctx.getBean(CommonConfiguration.class).logConfiguration();

			documentParser = ctx.getBean(DocumentParser.class);
			documentParser.parseDocuments();

			executeSpecificJob();

			ctx.close();

			Duration duration = Duration.between(start, Instant.now());

			logResult(duration);

		} catch (Exception e) {
			throw new MojoExecutionException(e.getMessage(), e);
		}
	}

	/**
	 * This class must be overriden by the concrete subclasses. It contains the specific work to execute for this Mojo's
	 * goal
	 * 
	 * @throws Exception
	 */
	protected abstract void executeSpecificJob() throws Exception;

	/**
	 * This class must be overridden by the concrete subclasses. It allows to display a specific information message,
	 * that states what has been executed by this Mojo's goal
	 */
	protected abstract void logResult(Duration duration);
}
