/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.client.domain.allGraphQLCases;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
@JsonSubTypes({ @Type(value = AllFieldCasesInterfaceType.class, name = "AllFieldCasesInterfaceType") })
@GraphQLInterfaceType("AllFieldCasesInterface")
public interface AllFieldCasesInterface  {

	@JsonProperty("id")
	@GraphQLScalar( fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = String.class)
	public void setId(String id);

	@JsonProperty("id")
	@GraphQLScalar( fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = String.class)
	public String getId();

	@JsonProperty("name")
	@GraphQLScalar( fieldName = "name", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setName(String name);

	@JsonProperty("name")
	@GraphQLScalar( fieldName = "name", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getName();

	@GraphQLInputParameters(names = {"uppercase", "textToAppendToTheForname"}, types = {"Boolean", "String"})
	@JsonProperty("forname")
	@GraphQLScalar( fieldName = "forname", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setForname(String forname);

	@GraphQLInputParameters(names = {"uppercase", "textToAppendToTheForname"}, types = {"Boolean", "String"})
	@JsonProperty("forname")
	@GraphQLScalar( fieldName = "forname", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getForname();

	@JsonProperty("age")
	@GraphQLScalar( fieldName = "age", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	public void setAge(Integer age);

	@JsonProperty("age")
	@GraphQLScalar( fieldName = "age", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	public Integer getAge();

	@JsonProperty("nbComments")
	@GraphQLScalar( fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	public void setNbComments(Integer nbComments);

	@JsonProperty("nbComments")
	@GraphQLScalar( fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	public Integer getNbComments();

	@JsonDeserialize(contentAs = String.class)
	@JsonProperty("comments")
	@GraphQLScalar( fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setComments(List<String> comments);

	@JsonDeserialize(contentAs = String.class)
	@JsonProperty("comments")
	@GraphQLScalar( fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = String.class)
	public List<String> getComments();

	@JsonDeserialize(contentAs = Boolean.class)
	@JsonProperty("booleans")
	@GraphQLScalar( fieldName = "booleans", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public void setBooleans(List<Boolean> booleans);

	@JsonDeserialize(contentAs = Boolean.class)
	@JsonProperty("booleans")
	@GraphQLScalar( fieldName = "booleans", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public List<Boolean> getBooleans();

	@JsonDeserialize(contentAs = String.class)
	@JsonProperty("aliases")
	@GraphQLScalar( fieldName = "aliases", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setAliases(List<String> aliases);

	@JsonDeserialize(contentAs = String.class)
	@JsonProperty("aliases")
	@GraphQLScalar( fieldName = "aliases", graphQLTypeSimpleName = "String", javaClass = String.class)
	public List<String> getAliases();

	@JsonDeserialize(contentAs = String.class)
	@JsonProperty("planets")
	@GraphQLScalar( fieldName = "planets", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setPlanets(List<String> planets);

	@JsonDeserialize(contentAs = String.class)
	@JsonProperty("planets")
	@GraphQLScalar( fieldName = "planets", graphQLTypeSimpleName = "String", javaClass = String.class)
	public List<String> getPlanets();

	@JsonDeserialize(contentAs = Human.class)
	@JsonProperty("friends")
	@GraphQLNonScalar( fieldName = "friends", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public void setFriends(List<Human> friends);

	@JsonDeserialize(contentAs = Human.class)
	@JsonProperty("friends")
	@GraphQLNonScalar( fieldName = "friends", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	public List<Human> getFriends();

	@JsonProperty("oneWithIdSubType")
	@GraphQLNonScalar( fieldName = "oneWithIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public void setOneWithIdSubType(AllFieldCasesWithIdSubtype oneWithIdSubType);

	@JsonProperty("oneWithIdSubType")
	@GraphQLNonScalar( fieldName = "oneWithIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public AllFieldCasesWithIdSubtype getOneWithIdSubType();

	@JsonDeserialize(contentAs = AllFieldCasesWithIdSubtype.class)
	@GraphQLInputParameters(names = {"nbItems", "uppercaseName", "textToAppendToTheForname"}, types = {"Int", "Boolean", "String"})
	@JsonProperty("listWithIdSubTypes")
	@GraphQLNonScalar( fieldName = "listWithIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public void setListWithIdSubTypes(List<AllFieldCasesWithIdSubtype> listWithIdSubTypes);

	@JsonDeserialize(contentAs = AllFieldCasesWithIdSubtype.class)
	@GraphQLInputParameters(names = {"nbItems", "uppercaseName", "textToAppendToTheForname"}, types = {"Int", "Boolean", "String"})
	@JsonProperty("listWithIdSubTypes")
	@GraphQLNonScalar( fieldName = "listWithIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithIdSubtype", javaClass = AllFieldCasesWithIdSubtype.class)
	public List<AllFieldCasesWithIdSubtype> getListWithIdSubTypes();

	@GraphQLInputParameters(names = {"input"}, types = {"FieldParameterInput"})
	@JsonProperty("oneWithoutIdSubType")
	@GraphQLNonScalar( fieldName = "oneWithoutIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public void setOneWithoutIdSubType(AllFieldCasesWithoutIdSubtype oneWithoutIdSubType);

	@GraphQLInputParameters(names = {"input"}, types = {"FieldParameterInput"})
	@JsonProperty("oneWithoutIdSubType")
	@GraphQLNonScalar( fieldName = "oneWithoutIdSubType", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public AllFieldCasesWithoutIdSubtype getOneWithoutIdSubType();

	@JsonDeserialize(contentAs = AllFieldCasesWithoutIdSubtype.class)
	@GraphQLInputParameters(names = {"nbItems", "input", "textToAppendToTheForname"}, types = {"Int", "FieldParameterInput", "String"})
	@JsonProperty("listWithoutIdSubTypes")
	@GraphQLNonScalar( fieldName = "listWithoutIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public void setListWithoutIdSubTypes(List<AllFieldCasesWithoutIdSubtype> listWithoutIdSubTypes);

	@JsonDeserialize(contentAs = AllFieldCasesWithoutIdSubtype.class)
	@GraphQLInputParameters(names = {"nbItems", "input", "textToAppendToTheForname"}, types = {"Int", "FieldParameterInput", "String"})
	@JsonProperty("listWithoutIdSubTypes")
	@GraphQLNonScalar( fieldName = "listWithoutIdSubTypes", graphQLTypeSimpleName = "AllFieldCasesWithoutIdSubtype", javaClass = AllFieldCasesWithoutIdSubtype.class)
	public List<AllFieldCasesWithoutIdSubtype> getListWithoutIdSubTypes();

	@JsonProperty("__typename")
	@GraphQLScalar( fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void set__typename(String __typename);

	@JsonProperty("__typename")
	@GraphQLScalar( fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String get__typename();
}
