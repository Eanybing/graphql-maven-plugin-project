/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.forum;

import java.util.List;
import java.util.UUID;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Board")
public class Board {

	public Board() {
		// No action
	}

	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID",  javaClass = UUID.class)
	UUID id;

	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String",  javaClass = String.class)
	String name;

	@GraphQLScalar(fieldName = "publiclyAvailable", graphQLTypeSimpleName = "Boolean",  javaClass = Boolean.class)
	Boolean publiclyAvailable;

	@GraphQLNonScalar(fieldName = "topics", graphQLTypeSimpleName = "Topic",  javaClass = Topic.class)
	List<Topic> topics;

	public void setId(UUID id) {
		this.id = id;
	}

	public UUID getId() {
		return id;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setPubliclyAvailable(Boolean publiclyAvailable) {
		this.publiclyAvailable = publiclyAvailable;
	}

	public Boolean getPubliclyAvailable() {
		return publiclyAvailable;
	}

	public void setTopics(List<Topic> topics) {
		this.topics = topics;
	}

	public List<Topic> getTopics() {
		return topics;
	}

	@Override
	public String toString() {
		return "Board {" + "id: " + id + ", " + "name: " + name + ", " + "publiclyAvailable: " + publiclyAvailable
				+ ", " + "topics: " + topics + "}";
	}

	/**
	 * Enum of field names
	 */
	public static enum Field implements GraphQLField {
		Id("id"), Name("name"), PubliclyAvailable("publiclyAvailable"), Topics("topics");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		@Override
		public String getFieldName() {
			return fieldName;
		}

		@Override
		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private UUID id;
		private String name;
		private Boolean publiclyAvailable;
		private List<Topic> topics;

		public Builder withId(UUID id) {
			this.id = id;
			return this;
		}

		public Builder withName(String name) {
			this.name = name;
			return this;
		}

		public Builder withPubliclyAvailable(Boolean publiclyAvailable) {
			this.publiclyAvailable = publiclyAvailable;
			return this;
		}

		public Builder withTopics(List<Topic> topics) {
			this.topics = topics;
			return this;
		}

		public Board build() {
			Board _object = new Board();
			_object.setId(id);
			_object.setName(name);
			_object.setPubliclyAvailable(publiclyAvailable);
			_object.setTopics(topics);
			return _object;
		}
	}
}
