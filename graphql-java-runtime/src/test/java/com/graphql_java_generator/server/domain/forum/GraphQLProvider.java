/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.forum;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
import static graphql.schema.idl.TypeRuntimeWiring.newTypeWiring;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;

import javax.annotation.PostConstruct;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dataloader.DataLoader;
import org.dataloader.DataLoaderRegistry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.util.FileCopyUtils;

import graphql.GraphQL;
import graphql.TypeResolutionEnvironment;
import graphql.language.FieldDefinition;
import graphql.language.InterfaceTypeDefinition;
import graphql.language.ObjectTypeDefinition;
import graphql.language.Type;
import graphql.language.TypeName;
import graphql.schema.GraphQLObjectType;
import graphql.schema.GraphQLSchema;
import graphql.schema.TypeResolver;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;

import com.graphql_java_generator.server.util.BatchLoaderDelegate;

import java.util.Date;

/**
 * This class is responsible for providing all the GraphQL Beans to the graphql-java Spring Boot integration.
 * <BR/><BR/>
 * Based on the https://www.graphql-java.com/tutorials/getting-started-with-spring-boot/ tutorial
 * 
 * @author etienne-sf
 */
@Component
public class GraphQLProvider {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(GraphQLProvider.class);

	@Autowired
	ApplicationContext applicationContext;

	@Autowired
	GraphQLDataFetchers graphQLDataFetchers;

	private GraphQLSchema graphQLSchema;
	private GraphQL graphQL;

	@Bean
	public GraphQL graphQL() {
		return graphQL;
	}

	/**
	 * The {@link DataLoaderRegistry} will be autowired by Spring in the GraphQL Java Spring Boot framework. It will
	 * then be wired for each request execution, as specified in this page:
	 * <A HREF="https://www.graphql-java.com/documentation/master/batching/">graphql-java batching</A>
	 * 
	 * @return
	 */
	@Bean
	public DataLoaderRegistry dataLoaderRegistry() {
		logger.debug("Creating DataLoader registry");
		DataLoaderRegistry registry = new DataLoaderRegistry();
		DataLoader<Object, Object> dl;

		for (BatchLoaderDelegate<?, ?> batchLoaderDelegate : applicationContext
				.getBeansOfType(BatchLoaderDelegate.class).values()) {
			// Let's check that we didn't already register a BatchLoaderDelegate with this name
			if ((dl = registry.getDataLoader(batchLoaderDelegate.getName())) != null) {
				throw new RuntimeException(
						"Only one BatchLoaderDelegate with a given name is allows, but two have been found: "
								+ dl.getClass().getName() + " and " + batchLoaderDelegate.getClass().getName());
			}
			// Ok, let's register this new one.
			registry.register(batchLoaderDelegate.getName(), DataLoader.newDataLoader(batchLoaderDelegate));
		}

		return registry;
	}
	
	@PostConstruct
	public void init() throws IOException {
		Resource res;
		StringBuffer sdl = new StringBuffer();
		res = new ClassPathResource("/forum.graphqls");
		try(Reader reader = new InputStreamReader(res.getInputStream(), Charset.forName("UTF8"))) {
			sdl.append(FileCopyUtils.copyToString(reader));
		}
		this.graphQL = GraphQL.newGraphQL(buildSchema(sdl.toString())).build();
	}

	private GraphQLSchema buildSchema(String sdl) {
		TypeDefinitionRegistry typeRegistry = new SchemaParser().parse(sdl);

		RuntimeWiring runtimeWiring = buildWiring();
		SchemaGenerator schemaGenerator = new SchemaGenerator();
		graphQLSchema = schemaGenerator.makeExecutableSchema(typeRegistry, runtimeWiring);
		return graphQLSchema;
	}
	
	public GraphQLSchema getGraphQLSchema() {
		return graphQLSchema;
	}

	private RuntimeWiring buildWiring() {
		// Thanks to this thread :
		// https:// stackoverflow.com/questions/54251935/graphql-no-resolver-definied-for-interface-union-java
		//
		// Also see sample :
		// https://github.com/graphql-java/graphql-java-examples/tree/master/http-example
		return RuntimeWiring.newRuntimeWiring()
			.scalar(com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date)
			// Data fetchers for DataFetchersDelegateQueryType
			.type(newTypeWiring("QueryType").dataFetcher("boards", graphQLDataFetchers.dataFetchersDelegateQueryTypeBoards()))
			.type(newTypeWiring("QueryType").dataFetcher("nbBoards", graphQLDataFetchers.dataFetchersDelegateQueryTypeNbBoards()))
			.type(newTypeWiring("QueryType").dataFetcher("topics", graphQLDataFetchers.dataFetchersDelegateQueryTypeTopics()))
			.type(newTypeWiring("QueryType").dataFetcher("findTopics", graphQLDataFetchers.dataFetchersDelegateQueryTypeFindTopics()))
			// Data fetchers for DataFetchersDelegateMutationType
			.type(newTypeWiring("MutationType").dataFetcher("createBoard", graphQLDataFetchers.dataFetchersDelegateMutationTypeCreateBoard()))
			.type(newTypeWiring("MutationType").dataFetcher("createTopic", graphQLDataFetchers.dataFetchersDelegateMutationTypeCreateTopic()))
			.type(newTypeWiring("MutationType").dataFetcher("createPost", graphQLDataFetchers.dataFetchersDelegateMutationTypeCreatePost()))
			.type(newTypeWiring("MutationType").dataFetcher("createPosts", graphQLDataFetchers.dataFetchersDelegateMutationTypeCreatePosts()))
			// Data fetchers for DataFetchersDelegateSubscriptionType
			.type(newTypeWiring("SubscriptionType").dataFetcher("subscribeToNewPost", graphQLDataFetchers.dataFetchersDelegateSubscriptionTypeSubscribeToNewPost()))
			// Data fetchers for DataFetchersDelegateBoard
			.type(newTypeWiring("Board").dataFetcher("topics", graphQLDataFetchers.dataFetchersDelegateBoardTopics()))
			// Data fetchers for DataFetchersDelegateTopic
			.type(newTypeWiring("Topic").dataFetcher("author", graphQLDataFetchers.dataFetchersDelegateTopicAuthor()))
			.type(newTypeWiring("Topic").dataFetcher("author", graphQLDataFetchers.dataFetchersDelegateTopicAuthorWithDataLoader()))
			.type(newTypeWiring("Topic").dataFetcher("posts", graphQLDataFetchers.dataFetchersDelegateTopicPosts()))
			// Data fetchers for DataFetchersDelegatePost
			.type(newTypeWiring("Post").dataFetcher("author", graphQLDataFetchers.dataFetchersDelegatePostAuthor()))
			.type(newTypeWiring("Post").dataFetcher("author", graphQLDataFetchers.dataFetchersDelegatePostAuthorWithDataLoader()))
			// Data fetchers for DataFetchersDelegateMember
			.build();
	}

}
