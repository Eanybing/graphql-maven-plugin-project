/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.allGraphQLCases;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("MyQueryType")
public class MyQueryType  {

	public MyQueryType(){
		// No action
	}

	@GraphQLNonScalar(fieldName = "withoutParameters", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	List<Character> withoutParameters;


	@GraphQLNonScalar(fieldName = "withOneOptionalParam", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	Character withOneOptionalParam;


	@GraphQLNonScalar(fieldName = "withOneMandatoryParam", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	Character withOneMandatoryParam;


	@GraphQLNonScalar(fieldName = "withOneMandatoryParamDefaultValue", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	Character withOneMandatoryParamDefaultValue;


	@GraphQLNonScalar(fieldName = "withTwoMandatoryParamDefaultVal", graphQLTypeSimpleName = "Droid",  javaClass = Droid.class)
	Droid withTwoMandatoryParamDefaultVal;


	@GraphQLNonScalar(fieldName = "withEnum", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	Character withEnum;


	@GraphQLNonScalar(fieldName = "withList", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	List<Character> withList;


	@GraphQLNonScalar(fieldName = "allFieldCases", graphQLTypeSimpleName = "AllFieldCases",  javaClass = AllFieldCases.class)
	AllFieldCases allFieldCases;


	@GraphQLNonScalar(fieldName = "unionTest", graphQLTypeSimpleName = "AnyCharacter",  javaClass = AnyCharacter.class)
	List<AnyCharacter> unionTest;


	@GraphQLNonScalar(fieldName = "error", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	Character error;


	@GraphQLNonScalar(fieldName = "aBreak", graphQLTypeSimpleName = "break",  javaClass = _break.class)
	_break aBreak;


	@GraphQLScalar(fieldName = "directiveOnQuery", graphQLTypeSimpleName = "String",  javaClass = String.class)
	List<String> directiveOnQuery;


	@GraphQLNonScalar(fieldName = "directiveOnField", graphQLTypeSimpleName = "Character",  javaClass = Character.class)
	Character directiveOnField;


	@GraphQLNonScalar(fieldName = "relay", graphQLTypeSimpleName = "MyQueryType",  javaClass = MyQueryType.class)
	MyQueryType relay;



	public void setWithoutParameters(List<Character> withoutParameters) {
		this.withoutParameters = withoutParameters;
	}

	public List<Character> getWithoutParameters() {
		return withoutParameters;
	}

	public void setWithOneOptionalParam(Character withOneOptionalParam) {
		this.withOneOptionalParam = withOneOptionalParam;
	}

	public Character getWithOneOptionalParam() {
		return withOneOptionalParam;
	}

	public void setWithOneMandatoryParam(Character withOneMandatoryParam) {
		this.withOneMandatoryParam = withOneMandatoryParam;
	}

	public Character getWithOneMandatoryParam() {
		return withOneMandatoryParam;
	}

	public void setWithOneMandatoryParamDefaultValue(Character withOneMandatoryParamDefaultValue) {
		this.withOneMandatoryParamDefaultValue = withOneMandatoryParamDefaultValue;
	}

	public Character getWithOneMandatoryParamDefaultValue() {
		return withOneMandatoryParamDefaultValue;
	}

	public void setWithTwoMandatoryParamDefaultVal(Droid withTwoMandatoryParamDefaultVal) {
		this.withTwoMandatoryParamDefaultVal = withTwoMandatoryParamDefaultVal;
	}

	public Droid getWithTwoMandatoryParamDefaultVal() {
		return withTwoMandatoryParamDefaultVal;
	}

	public void setWithEnum(Character withEnum) {
		this.withEnum = withEnum;
	}

	public Character getWithEnum() {
		return withEnum;
	}

	public void setWithList(List<Character> withList) {
		this.withList = withList;
	}

	public List<Character> getWithList() {
		return withList;
	}

	public void setAllFieldCases(AllFieldCases allFieldCases) {
		this.allFieldCases = allFieldCases;
	}

	public AllFieldCases getAllFieldCases() {
		return allFieldCases;
	}

	public void setUnionTest(List<AnyCharacter> unionTest) {
		this.unionTest = unionTest;
	}

	public List<AnyCharacter> getUnionTest() {
		return unionTest;
	}

	public void setError(Character error) {
		this.error = error;
	}

	public Character getError() {
		return error;
	}

	public void setABreak(_break aBreak) {
		this.aBreak = aBreak;
	}

	public _break getABreak() {
		return aBreak;
	}

	public void setDirectiveOnQuery(List<String> directiveOnQuery) {
		this.directiveOnQuery = directiveOnQuery;
	}

	public List<String> getDirectiveOnQuery() {
		return directiveOnQuery;
	}

	public void setDirectiveOnField(Character directiveOnField) {
		this.directiveOnField = directiveOnField;
	}

	public Character getDirectiveOnField() {
		return directiveOnField;
	}

	public void setRelay(MyQueryType relay) {
		this.relay = relay;
	}

	public MyQueryType getRelay() {
		return relay;
	}

    public String toString() {
        return "MyQueryType {"
				+ "withoutParameters: " + withoutParameters
				+ ", "
				+ "withOneOptionalParam: " + withOneOptionalParam
				+ ", "
				+ "withOneMandatoryParam: " + withOneMandatoryParam
				+ ", "
				+ "withOneMandatoryParamDefaultValue: " + withOneMandatoryParamDefaultValue
				+ ", "
				+ "withTwoMandatoryParamDefaultVal: " + withTwoMandatoryParamDefaultVal
				+ ", "
				+ "withEnum: " + withEnum
				+ ", "
				+ "withList: " + withList
				+ ", "
				+ "allFieldCases: " + allFieldCases
				+ ", "
				+ "unionTest: " + unionTest
				+ ", "
				+ "error: " + error
				+ ", "
				+ "aBreak: " + aBreak
				+ ", "
				+ "directiveOnQuery: " + directiveOnQuery
				+ ", "
				+ "directiveOnField: " + directiveOnField
				+ ", "
				+ "relay: " + relay
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		WithoutParameters("withoutParameters"),
		WithOneOptionalParam("withOneOptionalParam"),
		WithOneMandatoryParam("withOneMandatoryParam"),
		WithOneMandatoryParamDefaultValue("withOneMandatoryParamDefaultValue"),
		WithTwoMandatoryParamDefaultVal("withTwoMandatoryParamDefaultVal"),
		WithEnum("withEnum"),
		WithList("withList"),
		AllFieldCases("allFieldCases"),
		UnionTest("unionTest"),
		Error("error"),
		ABreak("aBreak"),
		DirectiveOnQuery("directiveOnQuery"),
		DirectiveOnField("directiveOnField"),
		Relay("relay");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private List<Character> withoutParameters;
		private Character withOneOptionalParam;
		private Character withOneMandatoryParam;
		private Character withOneMandatoryParamDefaultValue;
		private Droid withTwoMandatoryParamDefaultVal;
		private Character withEnum;
		private List<Character> withList;
		private AllFieldCases allFieldCases;
		private List<AnyCharacter> unionTest;
		private Character error;
		private _break aBreak;
		private List<String> directiveOnQuery;
		private Character directiveOnField;
		private MyQueryType relay;


		public Builder withWithoutParameters(List<Character> withoutParameters) {
			this.withoutParameters = withoutParameters;
			return this;
		}
		public Builder withWithOneOptionalParam(Character withOneOptionalParam) {
			this.withOneOptionalParam = withOneOptionalParam;
			return this;
		}
		public Builder withWithOneMandatoryParam(Character withOneMandatoryParam) {
			this.withOneMandatoryParam = withOneMandatoryParam;
			return this;
		}
		public Builder withWithOneMandatoryParamDefaultValue(Character withOneMandatoryParamDefaultValue) {
			this.withOneMandatoryParamDefaultValue = withOneMandatoryParamDefaultValue;
			return this;
		}
		public Builder withWithTwoMandatoryParamDefaultVal(Droid withTwoMandatoryParamDefaultVal) {
			this.withTwoMandatoryParamDefaultVal = withTwoMandatoryParamDefaultVal;
			return this;
		}
		public Builder withWithEnum(Character withEnum) {
			this.withEnum = withEnum;
			return this;
		}
		public Builder withWithList(List<Character> withList) {
			this.withList = withList;
			return this;
		}
		public Builder withAllFieldCases(AllFieldCases allFieldCases) {
			this.allFieldCases = allFieldCases;
			return this;
		}
		public Builder withUnionTest(List<AnyCharacter> unionTest) {
			this.unionTest = unionTest;
			return this;
		}
		public Builder withError(Character error) {
			this.error = error;
			return this;
		}
		public Builder withABreak(_break aBreak) {
			this.aBreak = aBreak;
			return this;
		}
		public Builder withDirectiveOnQuery(List<String> directiveOnQuery) {
			this.directiveOnQuery = directiveOnQuery;
			return this;
		}
		public Builder withDirectiveOnField(Character directiveOnField) {
			this.directiveOnField = directiveOnField;
			return this;
		}
		public Builder withRelay(MyQueryType relay) {
			this.relay = relay;
			return this;
		}

		public MyQueryType build() {
			MyQueryType _object = new MyQueryType();
			_object.setWithoutParameters(withoutParameters);
			_object.setWithOneOptionalParam(withOneOptionalParam);
			_object.setWithOneMandatoryParam(withOneMandatoryParam);
			_object.setWithOneMandatoryParamDefaultValue(withOneMandatoryParamDefaultValue);
			_object.setWithTwoMandatoryParamDefaultVal(withTwoMandatoryParamDefaultVal);
			_object.setWithEnum(withEnum);
			_object.setWithList(withList);
			_object.setAllFieldCases(allFieldCases);
			_object.setUnionTest(unionTest);
			_object.setError(error);
			_object.setABreak(aBreak);
			_object.setDirectiveOnQuery(directiveOnQuery);
			_object.setDirectiveOnField(directiveOnField);
			_object.setRelay(relay);
			return _object;
		}
	}
}
