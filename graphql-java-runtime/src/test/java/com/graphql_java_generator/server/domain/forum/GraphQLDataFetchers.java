/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.server.domain.forum;

import java.util.Date;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import javax.annotation.Resource;

import org.dataloader.DataLoader;
import org.reactivestreams.Publisher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.graphql_java_generator.GraphqlUtils;

import graphql.schema.DataFetcher;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
public class GraphQLDataFetchers {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(GraphQLDataFetchers.class);

	@Resource
	DataFetchersDelegateQueryType dataFetchersDelegateQueryType;

	@Resource
	DataFetchersDelegateMutationType dataFetchersDelegateMutationType;

	@Resource
	DataFetchersDelegateSubscriptionType dataFetchersDelegateSubscriptionType;

	@Resource
	DataFetchersDelegateBoard dataFetchersDelegateBoard;

	@Resource
	DataFetchersDelegateTopic dataFetchersDelegateTopic;

	@Resource
	DataFetchersDelegatePost dataFetchersDelegatePost;

	@Resource
	DataFetchersDelegateMember dataFetchersDelegateMember;

	@Resource
	GraphqlUtils graphqlUtils;

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateQueryType
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Board>> dataFetchersDelegateQueryTypeBoards() {
		return dataFetchingEnvironment -> {

			List<Board> ret = dataFetchersDelegateQueryType.boards(dataFetchingEnvironment);
			logger.debug("boards: {} found rows", (ret == null) ? 0 : ret.size());

			return ret;
		};
	}

	public DataFetcher<Integer> dataFetchersDelegateQueryTypeNbBoards() {
		return dataFetchingEnvironment -> {

			Integer ret = null;
			try {
				ret = dataFetchersDelegateQueryType.nbBoards(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("nbBoards: 1 result found");
			else
				logger.debug("nbBoards: no result found");

			return ret;
		};
	}

	public DataFetcher<List<Topic>> dataFetchersDelegateQueryTypeTopics() {
		return dataFetchingEnvironment -> {
			String boardName = dataFetchingEnvironment.getArgument("boardName");

			List<Topic> ret = dataFetchersDelegateQueryType.topics(dataFetchingEnvironment, boardName);
			logger.debug("topics: {} found rows", (ret == null) ? 0 : ret.size());

			return ret;
		};
	}

	public DataFetcher<List<Topic>> dataFetchersDelegateQueryTypeFindTopics() {
		return dataFetchingEnvironment -> {
			String boardName = dataFetchingEnvironment.getArgument("boardName");
			List<String> keyword = dataFetchingEnvironment.getArgument("keyword");

			List<Topic> ret = dataFetchersDelegateQueryType.findTopics(dataFetchingEnvironment, boardName, keyword);
			logger.debug("findTopics: {} found rows", (ret == null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateMutationType
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Board> dataFetchersDelegateMutationTypeCreateBoard() {
		return dataFetchingEnvironment -> {
			String name = dataFetchingEnvironment.getArgument("name");
			Boolean publiclyAvailable = dataFetchingEnvironment.getArgument("publiclyAvailable");

			Board ret = null;
			try {
				ret = dataFetchersDelegateMutationType.createBoard(dataFetchingEnvironment, name, publiclyAvailable);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createBoard: 1 result found");
			else
				logger.debug("createBoard: no result found");

			return ret;
		};
	}

	public DataFetcher<Topic> dataFetchersDelegateMutationTypeCreateTopic() {
		return dataFetchingEnvironment -> {
			TopicInput topic = (TopicInput) graphqlUtils.getInputObject(dataFetchingEnvironment.getArgument("topic"),
					"TopicInput", TopicInput.class);

			Topic ret = null;
			try {
				ret = dataFetchersDelegateMutationType.createTopic(dataFetchingEnvironment, topic);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createTopic: 1 result found");
			else
				logger.debug("createTopic: no result found");

			return ret;
		};
	}

	public DataFetcher<Post> dataFetchersDelegateMutationTypeCreatePost() {
		return dataFetchingEnvironment -> {
			PostInput post = (PostInput) graphqlUtils.getInputObject(dataFetchingEnvironment.getArgument("post"),
					"PostInput", PostInput.class);

			Post ret = null;
			try {
				ret = dataFetchersDelegateMutationType.createPost(dataFetchingEnvironment, post);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createPost: 1 result found");
			else
				logger.debug("createPost: no result found");

			return ret;
		};
	}

	public DataFetcher<List<Post>> dataFetchersDelegateMutationTypeCreatePosts() {
		return dataFetchingEnvironment -> {
			@SuppressWarnings("unchecked")
			List<PostInput> spam = (List<PostInput>) graphqlUtils
					.getInputObject(dataFetchingEnvironment.getArgument("spam"), "PostInput", PostInput.class);

			List<Post> ret = dataFetchersDelegateMutationType.createPosts(dataFetchingEnvironment, spam);
			logger.debug("createPosts: {} found rows", (ret == null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSubscriptionType
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Publisher<Post>> dataFetchersDelegateSubscriptionTypeSubscribeToNewPost() {
		return dataFetchingEnvironment -> {
			String boardName = dataFetchingEnvironment.getArgument("boardName");

			Publisher<Post> ret = null;
			try {
				ret = dataFetchersDelegateSubscriptionType.subscribeToNewPost(dataFetchingEnvironment, boardName);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("subscribeToNewPost: 1 result found");
			else
				logger.debug("subscribeToNewPost: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateBoard
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Topic>> dataFetchersDelegateBoardTopics() {
		return dataFetchingEnvironment -> {
			Date since = dataFetchingEnvironment.getArgument("since");
			Board source = dataFetchingEnvironment.getSource();

			List<Topic> ret = dataFetchersDelegateBoard.topics(dataFetchingEnvironment, source, since);
			logger.debug("topics: {} found rows", (ret == null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateTopic
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Member> dataFetchersDelegateTopicAuthor() {
		return dataFetchingEnvironment -> {
			Topic source = dataFetchingEnvironment.getSource();

			Member ret = null;
			try {
				ret = dataFetchersDelegateTopic.author(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("author: 1 result found");
			else
				logger.debug("author: no result found");

			return ret;
		};
	}

	public DataFetcher<CompletableFuture<Member>> dataFetchersDelegateTopicAuthorWithDataLoader() {
		return dataFetchingEnvironment -> {
			Topic source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Member> dataLoader = dataFetchingEnvironment.getDataLoader("Member");

			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null)
				return dataFetchersDelegateTopic.author(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture
						.supplyAsync(() -> dataFetchersDelegateTopic.author(dataFetchingEnvironment, source));
		};
	}

	public DataFetcher<List<Post>> dataFetchersDelegateTopicPosts() {
		return dataFetchingEnvironment -> {
			UUID memberId = (dataFetchingEnvironment.getArgument("memberId") == null) ? null
					: UUID.fromString(dataFetchingEnvironment.getArgument("memberId"));
			String memberName = dataFetchingEnvironment.getArgument("memberName");
			Date since = dataFetchingEnvironment.getArgument("since");
			Topic source = dataFetchingEnvironment.getSource();

			List<Post> ret = dataFetchersDelegateTopic.posts(dataFetchingEnvironment, source, memberId, memberName,
					since);
			logger.debug("posts: {} found rows", (ret == null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePost
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Member> dataFetchersDelegatePostAuthor() {
		return dataFetchingEnvironment -> {
			Post source = dataFetchingEnvironment.getSource();

			Member ret = null;
			try {
				ret = dataFetchersDelegatePost.author(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("author: 1 result found");
			else
				logger.debug("author: no result found");

			return ret;
		};
	}

	public DataFetcher<CompletableFuture<Member>> dataFetchersDelegatePostAuthorWithDataLoader() {
		return dataFetchingEnvironment -> {
			Post source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Member> dataLoader = dataFetchingEnvironment.getDataLoader("Member");

			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null)
				return dataFetchersDelegatePost.author(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture
						.supplyAsync(() -> dataFetchersDelegatePost.author(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateMember
	////////////////////////////////////////////////////////////////////////////////////////////////
}
